<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="brw_ArtistBlocked" xml:space="preserve">
    <value>Artist is blocked</value>
  </data>
  <data name="brw_FetchError" xml:space="preserve">
    <value>Error fetching songdata</value>
  </data>
  <data name="brw_Header" xml:space="preserve">
    <value>Configure the bot responses for the following scenarios:</value>
  </data>
  <data name="brw_MaxSongs" xml:space="preserve">
    <value>Max songs in queue</value>
  </data>
  <data name="brw_NoSong" xml:space="preserve">
    <value>No song has been specified (empty request)</value>
  </data>
  <data name="brw_SongInQueue" xml:space="preserve">
    <value>Song already in queue</value>
  </data>
  <data name="brw_SongTooLong" xml:space="preserve">
    <value>Song too long</value>
  </data>
  <data name="brw_Success" xml:space="preserve">
    <value>Song added successfully</value>
  </data>
  <data name="bw_btnAdd" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="bw_btnClear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="bw_cbArtist" xml:space="preserve">
    <value>Artist</value>
  </data>
  <data name="bw_cbUser" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="bw_lblBlockedArtists" xml:space="preserve">
    <value>Blocked Artists</value>
  </data>
  <data name="bw_lblBlockedUsers" xml:space="preserve">
    <value>Blocked Users</value>
  </data>
  <data name="bw_menu_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lang_deDE" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="lang_en" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="mw_menu_Blacklist" xml:space="preserve">
    <value>Blocklist</value>
  </data>
  <data name="mw_menu_Connect" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="mw_menu_Disconnect" xml:space="preserve">
    <value>Disconnect</value>
  </data>
  <data name="mw_menu_Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="mw_menu_File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="mw_menu_Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="mw_menu_Help_About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="mw_menu_History" xml:space="preserve">
    <value>History</value>
  </data>
  <data name="mw_menu_History_Browser" xml:space="preserve">
    <value>History Browser</value>
  </data>
  <data name="mw_menu_History_Window" xml:space="preserve">
    <value>History Window</value>
  </data>
  <data name="mw_menu_Queue" xml:space="preserve">
    <value>Queue</value>
  </data>
  <data name="mw_menu_Queue_Browser" xml:space="preserve">
    <value>Queue Browser</value>
  </data>
  <data name="mw_menu_Queue_Clear" xml:space="preserve">
    <value>Clear Queue</value>
  </data>
  <data name="mw_menu_Queue_Window" xml:space="preserve">
    <value>Queue Window</value>
  </data>
  <data name="mw_menu_Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="mw_menu_Support" xml:space="preserve">
    <value>Support Us</value>
  </data>
  <data name="mw_menu_Widget" xml:space="preserve">
    <value>Widget</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="songify" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\songify.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="sw_Appearance_Color" xml:space="preserve">
    <value>Color:</value>
  </data>
  <data name="sw_Appearance_ThemeDark" xml:space="preserve">
    <value>Dark Theme</value>
  </data>
  <data name="sw_Appearance_ThemeLight" xml:space="preserve">
    <value>Light Theme</value>
  </data>
  <data name="sw_Config_Export" xml:space="preserve">
    <value>EXPORT CONFIG</value>
  </data>
  <data name="sw_Config_Import" xml:space="preserve">
    <value>IMPORT CONFIG</value>
  </data>
  <data name="sw_Integration_Autoconnect" xml:space="preserve">
    <value>autoconnect</value>
  </data>
  <data name="sw_Integration_btnLink" xml:space="preserve">
    <value>LINK</value>
  </data>
  <data name="sw_Integration_ConfigureResponses" xml:space="preserve">
    <value>Configure Bot Responses &amp; Commands</value>
  </data>
  <data name="sw_Integration_NBWatermark" xml:space="preserve">
    <value>NB Username (Twitch Username)</value>
  </data>
  <data name="sw_Integration_SpotifyLinked" xml:space="preserve">
    <value>Linked account:</value>
  </data>
  <data name="sw_Integration_TwitchChWatermark" xml:space="preserve">
    <value>Channel to join</value>
  </data>
  <data name="sw_SpotifySR_ChannelPoints" xml:space="preserve">
    <value>Channel Points Reward ID</value>
  </data>
  <data name="sw_SpotifySR_ClearQ" xml:space="preserve">
    <value>Clear Queue on Startup</value>
  </data>
  <data name="sw_SpotifySR_CommandCD" xml:space="preserve">
    <value>Command Cooldown (seconds)</value>
  </data>
  <data name="sw_SpotifySR_MaxLength" xml:space="preserve">
    <value>Max song length (in minutes)</value>
  </data>
  <data name="sw_SpotifySR_MaxReq" xml:space="preserve">
    <value>Max Requests per User</value>
  </data>
  <data name="sw_SpotifySR_MessageLogging" xml:space="preserve">
    <value>Enable Message Logging</value>
  </data>
  <data name="sw_SpotifySR_SRCommand" xml:space="preserve">
    <value>Enable SR (Command (!ssr SpotifyURI))</value>
  </data>
  <data name="sw_SpotifySR_SRReward" xml:space="preserve">
    <value>Enable SR (Channel Rewards)</value>
  </data>
  <data name="sw_tcOutput_AddSpaces" xml:space="preserve">
    <value>append spaces</value>
  </data>
  <data name="sw_tcOutput_Directory" xml:space="preserve">
    <value>Output Directory</value>
  </data>
  <data name="sw_tcOutput_DownloadAlbum" xml:space="preserve">
    <value>Download album cover (only works with API)</value>
  </data>
  <data name="sw_tcOutput_Format" xml:space="preserve">
    <value>Output Format (Text file &amp; Widget)</value>
  </data>
  <data name="sw_tcOutput_PauseText" xml:space="preserve">
    <value>Pause Text</value>
  </data>
  <data name="sw_tcOutput_PauseWatermark" xml:space="preserve">
    <value>Custom pause text (blank for emtpy text file)</value>
  </data>
  <data name="sw_tcOutput_SplitArtist" xml:space="preserve">
    <value>Split Artist and Title</value>
  </data>
  <data name="sw_tcOutput_UploadSongInfo" xml:space="preserve">
    <value>Upload song info</value>
  </data>
  <data name="sw_tcSpotify_SaveButton" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="sw_tcSpotify_UseOwnApp" xml:space="preserve">
    <value>Use Own AppID</value>
  </data>
  <data name="sw_tcSystem_Autostart" xml:space="preserve">
    <value>autostart with windows</value>
  </data>
  <data name="sw_tcSystem_Behavior" xml:space="preserve">
    <value>Behavior</value>
  </data>
  <data name="sw_tcSystem_CheckButton" xml:space="preserve">
    <value>CHECK FOR UPDATES</value>
  </data>
  <data name="sw_tcSystem_ChromeFetchRate" xml:space="preserve">
    <value>Chrome fetch rate (seconds)</value>
  </data>
  <data name="sw_tcSystem_lblLangauge" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="sw_tcSystem_Minimize" xml:space="preserve">
    <value>minimize to system tray</value>
  </data>
  <data name="sw_tcSystem_SendAnonData" xml:space="preserve">
    <value>send anonymous data</value>
  </data>
  <data name="sw_tcSystem_Telemetry" xml:space="preserve">
    <value>Telemetry</value>
  </data>
  <data name="sw_tc_Appearance" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="sw_tc_Config" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="sw_tc_Integration" xml:space="preserve">
    <value>Twitch</value>
  </data>
  <data name="sw_tc_Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="sw_tc_System" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="lang_ru" xml:space="preserve">
    <value>Russian</value>
  </data>
  <data name="sw_tcSpotify_UseSongifyApp" xml:space="preserve">
    <value>Use Songify AppID</value>
  </data>
  <data name="mw_menu_Twitch_Bot" xml:space="preserve">
    <value>Bot Config</value>
  </data>
  <data name="lang_es" xml:space="preserve">
    <value>Spanish</value>
  </data>
  <data name="lang_fr" xml:space="preserve">
    <value>French</value>
  </data>
  <data name="sw_tcSystem_translated" xml:space="preserve">
    <value>(translated using DeepL)</value>
  </data>
  <data name="brw_cmd_next" xml:space="preserve">
    <value>Displays the next song in queue</value>
  </data>
  <data name="brw_cmd_off" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="brw_cmd_on" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="brw_cmd_pos" xml:space="preserve">
    <value>Displays the queue position of the users songrequests</value>
  </data>
  <data name="brw_cmd_song" xml:space="preserve">
    <value>Displays the current song</value>
  </data>
  <data name="brw_cmd_description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="brw_cmd_enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="brw_cmd_trigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="sw_tcOutput_Format2" xml:space="preserve">
    <value>Output Format (Twitch Chat)</value>
  </data>
</root>